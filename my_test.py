# -*- coding = utf-8 -*-
# @Time : 2023-9-15 17:13
# @Author : Lurume
# @File : unittest.py
# @Software : PyCharm
from tkinter import ttk, messagebox
import unittest
from mock import patch
import tkinter as tk
import tkinter.messagebox
key = {'NOIp 普及组': ['P1002-[NOIP2002 普及组] 过河卒', 'P1008-[NOIP1998 普及组] 三连击', 'P1009-[NOIP1998 普及组] 阶乘之和', 'P1010-[NOIP1998 普及组] 幂次方', 'P1014-[NOIP1999 普及组] Cantor 表', 'P1015-[NOIP1999 普及组] 回文数', 'P1016-[NOIP1999 提高组] 旅行家的预算', 'P1020-[NOIP1999 普及组] 导弹拦截', 'P1022-[NOIP2000 普及组] 计算器的改良', 'P1023-[NOIP2000 普及组] 税收与补贴问题', 'P1028-[NOIP2001 普及组] 数的计算', 'P1029-[NOIP2001 普及组] 最大公约数和最小公倍数问题', 'P1030-[NOIP2001 普及组] 求先序排列', 'P1035-[NOIP2002 普及组] 级数求和', 'P1036-[NOIP2002 普及组] 选数', 'P1037-[NOIP2002 普及组] 产生数', 'P1042-[NOIP2003 普及组] 乒乓球', 'P1043-[NOIP2003 普及组] 数字游戏', 'P1044-[NOIP2003 普及组] 栈', 'P1045-[NOIP2003 普及组] 麦森数', 'P1046-[NOIP2005 普及组] 陶陶摘苹果', 'P1047-[NOIP2005 普及组] 校门外的树', 'P1048-[NOIP2005 普及组] 采药', 'P1049-[NOIP2001 普及组] 装箱问题'], '2002': ['P1002-[NOIP2002 普及组] 过河卒', 'P1031-[NOIP2002 提高组] 均分纸牌', 'P1032-[NOIP2002 提高组] 字串变换', 'P1033-[NOIP2002 提高组] 自由落体', 'P1034-[NOIP2002 提高组] 矩形覆盖', 'P1035-[NOIP2002 普及组] 级数求和', 'P1036-[NOIP2002 普及组] 选数', 'P1037-[NOIP2002 普及组] 产生数'], 'NOIp 提高组': ['P1003-[NOIP2011 提高组] 铺地毯', 'P1004-[NOIP2000 提高组] 方格取数', 'P1005-[NOIP2007 提高组] 矩阵取数游戏', 'P1006-[NOIP2008 提高组] 传纸条', 'P1011-[NOIP1998 提高组] 车站', 'P1012-[NOIP1998 提高组] 拼数', 'P1013-[NOIP1998 提高组] 进制位', 'P1016-[NOIP1999 提高组] 旅行家的预算', 'P1017-[NOIP2000 提高组] 进制转换', 'P1018-[NOIP2000 提高组] 乘积最大', 'P1019-[NOIP2000 提高组] 单词接龙', 'P1021-[NOIP1999 提高组] 邮票面值设计', 'P1024-[NOIP2001 提高组] 一元三次方程求解', 'P1025-[NOIP2001 提高组] 数的划分', 'P1026-[NOIP2001 提高组] 统计单词个数', 'P1027-[NOIP2001 提高组] Car 的旅行路线', 'P1031-[NOIP2002 提高组] 均分纸牌', 'P1032-[NOIP2002 提高组] 字串变换', 'P1033-[NOIP2002 提高组] 自由落体', 'P1034-[NOIP2002 提高组] 矩形覆盖', 'P1038-[NOIP2003 提高组] 神经网络', 'P1039-[NOIP2003 提高组] 侦探推理', 'P1040-[NOIP2003 提高组] 加分二叉树', 'P1041-[NOIP2003 提高组] 传染病控制'], '2011': ['P1003-[NOIP2011 提高组] 铺地毯'], '2000': ['P1004-[NOIP2000 提高组] 方格取数', 'P1017-[NOIP2000 提高组] 进制转换', 'P1018-[NOIP2000 提高组] 乘积最大', 'P1019-[NOIP2000 提高组] 单词接龙', 'P1022-[NOIP2000 普及组] 计算器的改良', 'P1023-[NOIP2000 普及组] 税收与补贴问题'], '2007': ['P1005-[NOIP2007 提高组] 矩阵取数游戏'], '2008': ['P1006-[NOIP2008 提高组] 传纸条'], '1998': ['P1008-[NOIP1998 普及组] 三连击', 'P1009-[NOIP1998 普及组] 阶乘之和', 'P1010-[NOIP1998 普及组] 幂次方', 'P1011-[NOIP1998 提高组] 车站', 'P1012-[NOIP1998 提高组] 拼数', 'P1013-[NOIP1998 提高组] 进制位'], '1999': ['P1014-[NOIP1999 普及组] Cantor 表', 'P1015-[NOIP1999 普及组] 回文数', 'P1016-[NOIP1999 提高组] 旅行家的预算', 'P1020-[NOIP1999 普及组] 导弹拦截', 'P1021-[NOIP1999 提高组] 邮票面值设计'], '2001': ['P1024-[NOIP2001 提高组] 一元三次方程求解', 'P1025-[NOIP2001 提高组] 数的划分', 'P1026-[NOIP2001 提高组] 统计单词个数', 'P1027-[NOIP2001 提高组] Car 的旅行路线', 'P1028-[NOIP2001 普及组] 数的计算', 'P1029-[NOIP2001 普及组] 最大公约数和最小公倍数问题', 'P1030-[NOIP2001 普及组] 求先序排列', 'P1049-[NOIP2001 普及组] 装箱问题'], '2003': ['P1038-[NOIP2003 提高组] 神经网络', 'P1039-[NOIP2003 提高组] 侦探推理', 'P1040-[NOIP2003 提高组] 加分二叉树', 'P1041-[NOIP2003 提高组] 传染病控制', 'P1042-[NOIP2003 普及组] 乒乓球', 'P1043-[NOIP2003 普及组] 数字游戏', 'P1044-[NOIP2003 普及组] 栈', 'P1045-[NOIP2003 普及组] 麦森数'], '2005': ['P1046-[NOIP2005 普及组] 陶陶摘苹果', 'P1047-[NOIP2005 普及组] 校门外的树', 'P1048-[NOIP2005 普及组] 采药'], '字符串': ['P1000-超级玛丽游戏', 'P1012-[NOIP1998 提高组] 拼数', 'P1015-[NOIP1999 普及组] 回文数', 'P1019-[NOIP2000 提高组] 单词接龙', 'P1022-[NOIP2000 普及组] 计算器的改良', 'P1026-[NOIP2001 提高组] 统计单词个数', 'P1030-[NOIP2001 普及组] 求先序排列', 'P1032-[NOIP2002 提高组] 字串变换', 'P1039-[NOIP2003 提高组] 侦探推理', 'P1042-[NOIP2003 普及组] 乒乓球'], '模拟': ['P1001-A+B Problem', 'P1003-[NOIP2011 提高组] 铺地毯', 'P1007-独木桥', 'P1008-[NOIP1998 普及组] 三连击', 'P1014-[NOIP1999 普及组] Cantor 表', 'P1015-[NOIP1999 普及组] 回文数', 'P1022-[NOIP2000 普及组] 计算器的改良', 'P1031-[NOIP2002 提高组] 均分纸牌', 'P1039-[NOIP2003 提高组] 侦探推理', 'P1042-[NOIP2003 普及组] 乒乓球', 'P1046-[NOIP2005 普及组] 陶陶摘苹果', 'P1047-[NOIP2005 普及组] 校门外的树'], '动态规划,dp': ['P1002-[NOIP2002 普及组] 过河卒', 'P1004-[NOIP2000 提高组] 方格取数', 'P1005-[NOIP2007 提高组] 矩阵取数游戏', 'P1006-[NOIP2008 提高组] 传纸条', 'P1018-[NOIP2000 提高组] 乘积最大', 'P1020-[NOIP1999 普及组] 导弹拦截', 'P1026-[NOIP2001 提高组] 统计单词个数', 'P1040-[NOIP2003 提高组] 加分二叉树', 'P1043-[NOIP2003 普及组] 数字游戏', 'P1044-[NOIP2003 普及组] 栈', 'P1048-[NOIP2005 普及组] 采药', 'P1049-[NOIP2001 普及组] 装箱问题'], '枚举': ['P1003-[NOIP2011 提高组] 铺地毯', 'P1008-[NOIP1998 普及组] 三连击', 'P1013-[NOIP1998 提高组] 进制位', 'P1014-[NOIP1999 普及组] Cantor 表', 'P1023-[NOIP2000 普及组] 税收与补贴问题', 'P1024-[NOIP2001 提高组] 一元三次方程求解', 'P1026-[NOIP2001 提高组] 统计单词个数', 'P1029-[NOIP2001 普及组] 最大公约数和最小公倍数问题', 'P1039-[NOIP2003 提高组] 侦探推理', 'P1040-[NOIP2003 提高组] 加分二叉树'], '递归': ['P1004-[NOIP2000 提高组] 方格取数', 'P1016-[NOIP1999 提高组] 旅行家的预算', 'P1028-[NOIP2001 普及组] 数的计算', 'P1030-[NOIP2001 普及组] 求先序排列', 'P1040-[NOIP2003 提高组] 加分二叉树', 'P1049-[NOIP2001 普及组] 装箱问题'], '费用流': ['P1004-[NOIP2000 提高组] 方格取数', 'P1006-[NOIP2008 提高组] 传纸条'], '高精度': ['P1005-[NOIP2007 提高组] 矩阵取数游戏', 'P1009-[NOIP1998 普及组] 阶乘之和', 'P1018-[NOIP2000 提高组] 乘积最大', 'P1037-[NOIP2002 普及组] 产生数', 'P1045-[NOIP2003 普及组] 麦森数'], '进制': ['P1005-[NOIP2007 提高组] 矩阵取数游戏', 'P1013-[NOIP1998 提高组] 进制位', 'P1017-[NOIP2000 提高组] 进制转换'], '贪心': ['P1007-独木桥', 'P1016-[NOIP1999 提高组] 旅行家的预算', 'P1020-[NOIP1999 普及组] 导弹拦截', 'P1031-[NOIP2002 提高组] 均分纸牌'], '数学': ['P1009-[NOIP1998 普及组] 阶乘之和', 'P1010-[NOIP1998 普及组] 幂次方', 'P1011-[NOIP1998 提高组] 车站', 'P1017-[NOIP2000 提高组] 进制转换', 'P1022-[NOIP2000 普及组] 计算器的改良', 'P1023-[NOIP2000 普及组] 税收与补贴问题', 'P1024-[NOIP2001 提高组] 一元三次方程求解', 'P1029-[NOIP2001 普及组] 最大公约数和最小公倍数问题', 'P1033-[NOIP2002 提高组] 自由落体', 'P1035-[NOIP2002 普及组] 级数求和', 'P1044-[NOIP2003 普及组] 栈', 'P1045-[NOIP2003 普及组] 麦森数'], '分治': ['P1010-[NOIP1998 普及组] 幂次方', 'P1024-[NOIP2001 提高组] 一元三次方程求解'], '斐波那契,Fibonacci': ['P1011-[NOIP1998 提高组] 车站'], '排序': ['P1012-[NOIP1998 提高组] 拼数'], '搜索': ['P1013-[NOIP1998 提高组] 进制位', 'P1019-[NOIP2000 提高组] 单词接龙', 'P1021-[NOIP1999 提高组] 邮票面值设计', 'P1025-[NOIP2001 提高组] 数的划分', 'P1032-[NOIP2002 提高组] 字串变换', 'P1034-[NOIP2002 提高组] 矩形覆盖', 'P1036-[NOIP2002 普及组] 选数', 'P1041-[NOIP2003 提高组] 传染病控制', 'P1043-[NOIP2003 普及组] 数字游戏'], '二分': ['P1020-[NOIP1999 普及组] 导弹拦截', 'P1024-[NOIP2001 提高组] 一元三次方程求解', 'P1039-[NOIP2003 提高组] 侦探推理'], '递推': ['P1025-[NOIP2001 提高组] 数的划分', 'P1028-[NOIP2001 普及组] 数的计算', 'P1044-[NOIP2003 普及组] 栈'], '剪枝': ['P1025-[NOIP2001 提高组] 数的划分', 'P1032-[NOIP2002 提高组] 字串变换'], '图论': ['P1027-[NOIP2001 提高组] Car 的旅行路线', 'P1038-[NOIP2003 提高组] 神经网络'], '计算几何': ['P1027-[NOIP2001 提高组] Car 的旅行路线', 'P1034-[NOIP2002 提高组] 矩形覆盖'], '最大公约数,gcd': ['P1029-[NOIP2001 普及组] 最大公约数和最小公倍数问题'], '树形数据结构': ['P1030-[NOIP2001 普及组] 求先序排列'], '深度优先搜索,DFS': ['P1030-[NOIP2001 普及组] 求先序排列', 'P1036-[NOIP2002 普及组] 选数', 'P1037-[NOIP2002 普及组] 产生数'], '广度优先搜索,BFS': ['P1032-[NOIP2002 提高组] 字串变换'], '素数判断,质数,筛法': ['P1036-[NOIP2002 普及组] 选数'], '拓扑排序': ['P1038-[NOIP2003 提高组] 神经网络'], '前缀和': ['P1043-[NOIP2003 普及组] 数字游戏'], '卡特兰数,Catalan': ['P1044-[NOIP2003 普及组] 栈'], '栈': ['P1044-[NOIP2003 普及组] 栈'], '背包': ['P1048-[NOIP2005 普及组] 采药', 'P1049-[NOIP2001 普及组] 装箱问题']}
difficult = {'入门': ['P1000-超级玛丽游戏', 'P1001-A+B Problem', 'P1035-[NOIP2002 普及组] 级数求和', 'P1046-[NOIP2005 普及组] 陶陶摘苹果', 'P1047-[NOIP2005 普及组] 校门外的树'], '普及−': ['P1002-[NOIP2002 普及组] 过河卒', 'P1003-[NOIP2011 提高组] 铺地毯', 'P1008-[NOIP1998 普及组] 三连击', 'P1009-[NOIP1998 普及组] 阶乘之和', 'P1010-[NOIP1998 普及组] 幂次方', 'P1011-[NOIP1998 提高组] 车站', 'P1012-[NOIP1998 提高组] 拼数', 'P1014-[NOIP1999 普及组] Cantor 表', 'P1015-[NOIP1999 普及组] 回文数', 'P1017-[NOIP2000 提高组] 进制转换', 'P1024-[NOIP2001 提高组] 一元三次方程求解', 'P1028-[NOIP2001 普及组] 数的计算', 'P1029-[NOIP2001 普及组] 最大公约数和最小公倍数问题', 'P1030-[NOIP2001 普及组] 求先序排列', 'P1031-[NOIP2002 提高组] 均分纸牌', 'P1036-[NOIP2002 普及组] 选数', 'P1042-[NOIP2003 普及组] 乒乓球', 'P1044-[NOIP2003 普及组] 栈', 'P1048-[NOIP2005 普及组] 采药', 'P1049-[NOIP2001 普及组] 装箱问题'], '普及+/提高': ['P1004-[NOIP2000 提高组] 方格取数', 'P1006-[NOIP2008 提高组] 传纸条', 'P1013-[NOIP1998 提高组] 进制位', 'P1016-[NOIP1999 提高组] 旅行家的预算', 'P1018-[NOIP2000 提高组] 乘积最大', 'P1021-[NOIP1999 提高组] 邮票面值设计', 'P1032-[NOIP2002 提高组] 字串变换', 'P1038-[NOIP2003 提高组] 神经网络', 'P1040-[NOIP2003 提高组] 加分二叉树', 'P1043-[NOIP2003 普及组] 数字游戏'], '提高+/省选−': ['P1005-[NOIP2007 提高组] 矩阵取数游戏', 'P1027-[NOIP2001 提高组] Car 的旅行路线', 'P1034-[NOIP2002 提高组] 矩形覆盖', 'P1039-[NOIP2003 提高组] 侦探推理', 'P1041-[NOIP2003 提高组] 传染病控制'], '普及/提高−': ['P1007-独木桥', 'P1019-[NOIP2000 提高组] 单词接龙', 'P1020-[NOIP1999 普及组] 导弹拦截', 'P1022-[NOIP2000 普及组] 计算器的改良', 'P1023-[NOIP2000 普及组] 税收与补贴问题', 'P1025-[NOIP2001 提高组] 数的划分', 'P1026-[NOIP2001 提高组] 统计单词个数', 'P1033-[NOIP2002 提高组] 自由落体', 'P1037-[NOIP2002 普及组] 产生数', 'P1045-[NOIP2003 普及组] 麦森数']}
selected_folder = []

def filter_button_clicked(difficulty='',keyword=''):
    global selected_folder
    selected_folder.clear()
    #获取文本框输入内容
    keyword = keyword.split("-")
    #相应难度下没有题目
    if difficult.get(str(difficulty)) == None:
        selected_folder.append("暂无符合条件的题目")
    else:
        #获取相应难度下的题目
        diff = list(difficult.get(str(difficulty)))
        for i in diff:
            i = str(i)
            flag = 1
            if keyword != ['']:
                # 列表不为空，执行其他操作
                #检查是否满足其他关键词
                for k in keyword:
                    if not (i in key[str(k)]):
                        flag = 0
            #满足所有关键词则添加入列表元素
            if flag == 1:
                selected_folder.append(i)
    # 判断是否有符合条件的题目
    if len(selected_folder) == 0:
        selected_folder.append("暂无符合条件的题目")
    print(selected_folder)
    return selected_folder


class TestFilterFunction(unittest.TestCase):
    def setUp(self):
        self.window = tk.Tk()


    def tearDown(self):
        self.window.destroy()

    def test_filter_button_clicked_no_conditions(self):
        nandu = {'0': '入门', '1': '普及−', '2': '普及/提高−'}
        guanjian = {'A': '字符串', 'B': '数学-枚举', 'C': '数学-枚举'}

        # 第一次测试
        # 模拟用户输入，点击筛选按钮
        selected_folder = filter_button_clicked(nandu.get('0'), guanjian.get('A'))

        # 验证结果是否与预期一致
        expected_selected_folder = ['P1000-超级玛丽游戏']
        self.assertEqual(selected_folder, expected_selected_folder, msg='测试失败')


        # 第二次测试
        # 模拟用户输入，点击筛选按钮
        selected_folder =filter_button_clicked(nandu.get('1'), guanjian.get('B'))

        # 验证结果是否与预期一致
        expected_selected_folder = ['P1024-[NOIP2001 提高组] 一元三次方程求解', 'P1029-[NOIP2001 普及组] 最大公约数和最小公倍数问题']
        self.assertEqual(selected_folder, expected_selected_folder, msg='测试失败')

        # 第三次测试
        # 模拟用户输入，点击筛选按钮
        selected_folder = filter_button_clicked(nandu.get('2'), guanjian.get('C'))

        # 验证结果是否与预期一致
        expected_selected_folder = ['P1023-[NOIP2000 普及组] 税收与补贴问题']
        self.assertEqual(selected_folder, expected_selected_folder, msg='测试失败')


    def test_filter_button_clicked_invalid_conditions(self):
        nandu = {'0': '普及-', '1': '省宣/NOI-'}
        guanjian = '数学-枚举-排序'

        # 第一次测试
        # 模拟用户输入，点击筛选按钮
        selected_folder = filter_button_clicked(nandu.get('0'), guanjian)

        # 验证结果是否与预期一致
        expected_selected_folder = ['暂无符合条件的题目']
        self.assertEqual(selected_folder, expected_selected_folder, msg='测试失败')

        # 第二次测试
        # 模拟用户输入，点击筛选按钮
        selected_folder = filter_button_clicked(nandu.get('1'))
        # 验证结果是否与预期一致
        expected_selected_folder = ['暂无符合条件的题目']
        self.assertEqual(selected_folder, expected_selected_folder, msg='测试失败')
if __name__ == '__main__':
    unittest.main()